buildscript {
  repositories {
    maven {
      url 'https://repox.jfrog.io/repox/plugins.gradle.org/'
    }
  }
  dependencies {
    // Ordered alphabetically to avoid duplication
    classpath 'com.github.ben-manes:gradle-versions-plugin:0.28.0'
    classpath 'com.github.jengelman.gradle.plugins:shadow:5.0.0'
    classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.10'
    classpath 'gradle.plugin.com.google.cloud.tools:jib-gradle-plugin:2.7.1'
    classpath 'gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.14.0'
    classpath 'io.spring.gradle:dependency-management-plugin:1.0.9.RELEASE'
    classpath 'net.rdrei.android.buildtimetracker:gradle-plugin:0.11.1'
    classpath 'org.jfrog.buildinfo:build-info-extractor-gradle:4.15.1'
    classpath 'org.owasp:dependency-check-gradle:6.1.0'
    classpath 'org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.7.1'
  }
}

// display a summary of task durations at the end of the build
if (project.hasProperty('time-tracker')) {
  apply plugin: 'build-time-tracker'
  buildtimetracker {
    reporters {
      summary {
        ordered true
        threshold 1000
        barstyle 'ascii'
      }
    }
  }
}

// Analyze SonarQube with SonarQube!
ext.versionInSources = version
apply plugin: 'org.sonarqube'
sonarqube {
  properties {
    property 'sonar.projectKey', 'SonarSource_sonarcloud-core'
    property 'sonar.organization', 'sonarsource'
    property 'sonar.projectName', projectTitle
    property 'sonar.projectVersion', versionInSources
    property 'sonar.buildString', version
    property 'sonar.coverage.exclusions', '**/src/main/java/org/sonar/test/**/*.java,**/__mocks__/**,**/@types/**,' +
              '**/sonar-web/src/components/icons/**,**/sonar-web/src/helpers/mocks/**,**/sonar-web/src/api/**,'+
              '**/sonar-web/src/components/controls/Tooltip.tsx,**/sonar-web/src/components/charts/**,' +    // TODO Drop this line after 01.04.2021
              '**/sonar-web/src/**/routes.ts,**/sonar-web/src/pages/**,**/sonar-web/src/app/WebApp.tsx,'+
              '**/sonar-web/src/helpers/testUtils.ts,**/sonar-web/src/helpers/testMocks.ts,**/sonar-web/src/helpers/keycodes.ts'
  }
}


if (!JavaVersion.current().java11Compatible) {
  throw new GradleException("JDK 11+ is required to perform this build. It's currently " + System.getProperty("java.home") + ".")
}

apply plugin: 'org.owasp.dependencycheck'
dependencyCheck {
  analyzers {
    assemblyEnabled = false
    autoconfEnabled = false
    bundleAuditEnabled = false
    cmakeEnabled = false
    cocoapodsEnabled = false
    composerEnabled = false
    cocoapodsEnabled = false
    golangDepEnabled = false
    golangModEnabled = false
    nodeAudit {
      skipDevDependencies = true
    }
    nuspecEnabled = false
    nugetconfEnabled = false
    rubygemsEnabled = false
    swiftEnabled = false

  }
  format = 'ALL'
  junitFailOnCVSS = 0
  failBuildOnCVSS = 0
  suppressionFiles = ["${project.rootDir}/owasp-suppressions.xml", "${project.rootDir}/owasp-vulnerabilities.xml"]
  skipProjects = project.subprojects
      .findAll {it.name.contains('testing') ||
          it.name.startsWith('it-') ||
          it.name.contains('-test') ||
          it.name == 'sonar-ws-generator' ||
          it.name.contains('selenium')}
      .collect { it.path }
}

allprojects {
  apply plugin: 'com.jfrog.artifactory'
  apply plugin: 'maven-publish'

  ext.buildNumber = System.getProperty("buildNumber")
  ext.versionWithoutBuildNumber = version
  // Replaces the version defined in sources, usually x.y-SNAPSHOT, by a version identifying the build.
  if (version.endsWith('-SNAPSHOT') && ext.buildNumber != null) {
    def versionSuffix = (version.toString().count('.') == 1 ? ".0.${ext.buildNumber}" : ".${ext.buildNumber}")
    version = version.replace('-SNAPSHOT', versionSuffix)
  }

  ext {
    release = project.hasProperty('release') && project.getProperty('release')
    official = project.hasProperty('official') && project.getProperty('official')
    // https://console.cloud.google.com/home/dashboard?project=ci-cd-215716
  }

  repositories {
    maven {
      url "https://repox.jfrog.io/repox/sonarsource"
      // The environment variables ARTIFACTORY_USERNAME and ARTIFACTORY_PASSWORD are used on QA env
      // On local box, please add artifactoryUsername and artifactoryPassword to ~/.gradle/gradle.properties
      def artifactoryUsername = System.env.'ARTIFACTORY_USERNAME' ?: (project.hasProperty('artifactoryUsername') ? project.getProperty('artifactoryUsername') : '')
      def artifactoryPassword = System.env.'ARTIFACTORY_PASSWORD' ?: (project.hasProperty('artifactoryPassword') ? project.getProperty('artifactoryPassword') : '')
      if (artifactoryUsername && artifactoryPassword) {
        credentials {
          username artifactoryUsername
          password artifactoryPassword
        }
      }
    }
  }

  task allDependencies {
    dependsOn 'dependencies'
  }
}

subprojects {
  apply plugin: 'com.github.hierynomus.license'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'jacoco'
  apply plugin: 'java'
  apply plugin: 'idea'

  sourceCompatibility = 1.8
  targetCompatibility = 1.8

  // do not deploy to Artifactory by default
  artifactoryPublish.skip = true

  def testFixturesEnabled = file('src/testFixtures').exists();
  if (testFixturesEnabled) {
    apply plugin: 'java-test-fixtures'

    idea {
      module {
        testSourceDirs += file('src/testFixtures/java')
      }
    }
  }

  ext {
    protobufVersion = '3.9.0'
  }

  sonarqube {
    properties {
      property 'sonar.moduleKey', project.group + ':' + project.name
      if (testFixturesEnabled) {
        property "sonar.tests", "src/test/java,src/testFixtures/java"
      }
    }
  }

  // Central place for definition dependency versions and exclusions.
  dependencyManagement {
    imports {
      mavenBom 'software.amazon.awssdk:bom:2.16.10'
    }
    dependencies {
      // please keep this list alphabetically ordered
      dependencySet(group: 'ch.qos.logback', version: '1.2.3') {
        entry 'logback-access'
        entry 'logback-classic'
        entry 'logback-core'
      }
      dependency('commons-beanutils:commons-beanutils:1.8.3') {
        exclude 'commons-logging:commons-logging'
      }
      dependency 'commons-codec:commons-codec:1.14'
      dependency 'commons-dbutils:commons-dbutils:1.7'
      dependency 'commons-io:commons-io:2.6'
      dependency 'commons-lang:commons-lang:2.6'
      dependencySet(group:'com.amazonaws', version: '1.11.749') {
        entry('aws-java-sdk-sns') {
          exclude group: 'commons-logging', name: 'commons-logging'
        }
        entry('aws-java-sdk-sqs') {
          exclude group: 'commons-logging', name: 'commons-logging'
        }
      }
      dependency 'com.amazonaws:aws-lambda-java-log4j2:1.2.0'
      dependency 'com.amazonaws:aws-lambda-java-core:1.2.1'
      dependency 'com.amazonaws:aws-lambda-java-events:3.7.0'
      dependency 'com.amazonaws:aws-java-sdk-apigatewaymanagementapi:1.11.942'
      dependency 'com.amazonaws:aws-java-sdk-dynamodb:1.11.942'
      dependency 'com.amazonaws:aws-java-sdk-s3:1.11.942'
      dependency 'com.amazonaws:aws-java-sdk-lambda:1.11.942'
      dependency 'com.amazonaws:aws-java-sdk-logs:1.11.942'
      dependency 'com.auth0:java-jwt:3.10.2'
      dependency('com.codeborne:selenide:5.8.0') {
        exclude 'org.seleniumhq.selenium:selenium-ie-driver'
        exclude 'org.seleniumhq.selenium:selenium-opera-driver'
        exclude 'org.seleniumhq.selenium:selenium-safari-driver'
      }
      dependency 'com.eclipsesource.minimal-json:minimal-json:0.9.5'
      dependencySet(group: 'com.fasterxml.jackson.core', version: '2.11.1') {
        entry 'jackson-core'
        entry 'jackson-databind'
        entry 'jackson-annotations'
      }
      dependency 'com.github.kevinsawicki:http-request:5.4.1'
      dependency 'com.github.stefanbirkner:system-rules:1.19.0'
      dependency 'com.googlecode.java-diff-utils:diffutils:1.2'
      dependency('com.googlecode.json-simple:json-simple:1.1.1') {
        exclude 'junit:junit'
      }
      dependency 'com.google.code.findbugs:jsr305:3.0.2'
      dependency 'com.google.code.gson:gson:2.8.6'
      dependency 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20190610.1'
      dependency('com.google.guava:guava:30.1-jre') {
        exclude 'com.google.errorprone:error_prone_annotations'
        exclude 'com.google.guava:listenablefuture'
        exclude 'com.google.j2objc:j2objc-annotations'
        exclude 'org.checkerframework:checker-qual'
        exclude 'org.codehaus.mojo:animal-sniffer-annotations'
      }
      dependency "com.google.protobuf:protobuf-java:${protobufVersion}"
      dependency "com.google.protobuf:protobuf-java-util:${protobufVersion}"
      dependency 'com.h2database:h2:1.4.200'
      dependency 'com.ibm.icu:icu4j:3.4.4'
      dependencySet(group: 'com.squareup.okhttp3', version: '4.8.1') {
        entry 'mockwebserver'
        entry 'okhttp'
      }
      dependency('com.sparkjava:spark-core:2.9.2') {
        exclude 'org.slf4j:slf4j-api'
        exclude 'org.eclipse.jetty.websocket:websocket-server'
        exclude 'org.eclipse.jetty.websocket:websocket-servlet'
      }
      dependency 'com.tngtech.java:junit-dataprovider:1.13.1'
      dependency 'info.picocli:picocli:3.6.1'
      dependencySet(group: 'io.jsonwebtoken', version: '0.11.0') {
        entry 'jjwt-api'
        entry 'jjwt-impl'
        entry 'jjwt-jackson'
      }
      dependency 'com.sun.mail:javax.mail:1.5.6'
      dependency 'javax.annotation:javax.annotation-api:1.3.2'
      dependency 'javax.servlet:javax.servlet-api:3.1.0'
      dependency 'javax.xml.bind:jaxb-api:2.3.0'
      dependency 'junit:junit:4.13.1'
      dependency 'net.javacrumbs.json-unit:json-unit-fluent:2.14.0'
      dependency 'net.jpountz.lz4:lz4:1.3.0'
      dependency 'net.lightbody.bmp:littleproxy:1.1.0-beta-bmp-17'
      dependency 'nl.jqno.equalsverifier:equalsverifier:3.5'
      dependency 'org.awaitility:awaitility:4.0.2'
      dependency 'org.apache.commons:commons-compress:1.20'
      dependency 'org.apache.commons:commons-csv:1.4'
      dependency 'org.apache.commons:commons-email:1.5'
      dependency 'org.apache.commons:commons-exec:1.3'
      dependency 'org.apache.commons:commons-dbcp2:2.5.0'
      dependency 'org.apache.commons:commons-lang3:3.9'
      dependency('org.apache.httpcomponents:httpclient:4.5.13'){
        exclude 'commons-logging:commons-logging'
      }
      dependency 'org.apache.httpcomponents:httpmime:4.5.2'
      // Be aware that Log4j is used by Elasticsearch client
      dependencySet(group: 'org.apache.logging.log4j', version: '2.8.2') {
        entry 'log4j-api'
        entry 'log4j-to-slf4j'
        entry 'log4j-core'
      }
      dependency 'org.apache.pdfbox:pdfbox:2.0.21'
      dependencySet(group: 'org.apache.tomcat.embed', version: '8.5.63') {
        entry 'tomcat-embed-core'
        entry('tomcat-embed-jasper') {
          exclude 'org.eclipse.jdt.core.compiler:ecj'
        }
      }
      dependency 'org.assertj:assertj-core:3.15.0'
      dependency 'org.bouncycastle:bcpkix-jdk15on:1.68'
      dependency('org.codehaus.sonar:sonar-channel:4.1') {
        exclude 'org.slf4j:slf4j-api'
      }
      dependency 'org.codehaus.sonar:sonar-classloader:1.0'
      dependency 'org.codehaus.sonar:sonar-ws-client:4.5'
      dependency('org.codehaus.woodstox:woodstox-core-lgpl:4.4.1') {
        exclude 'javax.xml.stream:stax-api'
      }
      dependency 'org.codehaus.sonar.runner:sonar-runner-api:2.4'
      dependency('org.codehaus.sonar:sonar-squid:4.1') {
        exclude 'org.codehaus.sonar:sonar-check-api'
      }
      dependency('org.codehaus.staxmate:staxmate:2.0.1') {
        exclude 'org.codehaus.woodstox:stax2-api'
        exclude 'stax:stax-api'
        exclude 'org.codehaus.woodstox:woodstox-core-asl'
      }
      dependency('org.codehaus.woodstox:stax2-api:3.1.4') {
        exclude 'stax:stax-api'
      }
      dependency('org.dbunit:dbunit:2.4.5') {
        exclude 'commons-lang:commons-lang'
        exclude 'xerces:xmlParserAPIs'
        exclude 'xerces:xercesImpl'
      }
      dependencySet(group: 'org.eclipse.jetty', version: '9.4.37.v20210219') {
        entry 'jetty-proxy'
        entry 'jetty-server'
        entry 'jetty-servlet'
        entry 'jetty-xml'
        entry 'jetty-webapp'
      }
      dependency 'org.eclipse.jgit:org.eclipse.jgit:5.3.0.201903130848-r'
      dependency('org.elasticsearch.client:transport:6.8.0') {
        exclude 'org.elasticsearch.plugin:lang-mustache-client'
        exclude 'commons-logging:commons-logging'
        exclude 'org.elasticsearch.plugin:reindex-client'
        exclude 'org.elasticsearch.plugin:rank-eval-client'
      }
      dependency 'org.elasticsearch:mocksocket:1.0'
      dependency 'org.codelibs.elasticsearch.module:analysis-common:6.8.0'
      dependency 'org.codelibs.elasticsearch.module:lang-painless:6.8.0'

      dependency 'org.freemarker:freemarker:2.3.20'
      dependency 'org.glassfish.jersey.connectors:jersey-apache-connector:2.26'
      dependency 'org.glassfish.jersey.core:jersey-client:2.26'
      dependency 'org.glassfish.jersey.inject:jersey-hk2:2.26'
      dependency 'org.hamcrest:hamcrest-all:1.3'
      dependency 'org.jsoup:jsoup:1.11.3'
      dependency 'org.mindrot:jbcrypt:0.4'
      dependency 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.2'
      dependency('org.mockito:mockito-core:3.3.0') {
        exclude 'org.hamcrest:hamcrest-core'
      }
      dependency 'org.mybatis:mybatis:3.5.6'
      dependency 'org.picocontainer:picocontainer:2.15'
      dependencySet(group: 'org.slf4j', version: '1.7.30') {
        entry 'jcl-over-slf4j'
        entry 'jul-to-slf4j'
        entry 'log4j-over-slf4j'
        entry 'slf4j-api'
      }
      dependency 'org.postgresql:postgresql:42.2.18'
      dependency 'org.reflections:reflections:0.9.12'
      dependency 'org.simpleframework:simple:4.1.21'
      dependency 'org.skyscreamer:jsonassert:1.5.0'
      dependency 'org.sonarsource.github:github-api:1.93.0.71'
      dependency 'org.sonarsource.sonarqube:sonar-plugin-api:8.5.0.37579'
      dependency 'org.sonarsource.update-center:sonar-update-center-common:1.18.0.487'
      dependency 'org.testcontainers:postgresql:1.15.1'
      dependency 'org.yaml:snakeyaml:1.17'
      dependency 'net.logstash.logback:logstash-logback-encoder:6.4'
      dependency 'xml-apis:xml-apis:1.4.01'
      // please keep this list alphabetically ordered
    }
  }

  // global exclusions
  configurations.all {
    // do not conflict with com.sun.mail:javax.mail
    exclude group: 'javax.mail', module: 'mail'
  }

  tasks.withType(JavaCompile) {
    options.compilerArgs.addAll(['--release', '8'])
    options.encoding = 'UTF-8'
  }

  task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
  }

  // generate code before opening project in IDE (Eclipse or Intellij)
  task ide() {
    // empty by default. Dependencies are added to the task
    // when needed (see protobuf modules for example)
  }

  jacocoTestReport {
    reports {
      xml.enabled true
      csv.enabled false
      html.enabled false
    }
  }

  normalization {
    runtimeClasspath {
      // Following classpath resources contain volatile data that changes in each CI build (build number, commit id, time),
      // so we exclude them from calculation of build cache key of test tasks:
      ignore 'META-INF/MANIFEST.MF'
      ignore 'sonar-api-version.txt'
      ignore 'sonar-server-version.txt'
      ignore 'sq-version.txt'
    }
  }
  test {
    jvmArgs '-Dfile.encoding=UTF8'
    maxHeapSize = '1G'
    systemProperty 'java.awt.headless', true
    reports.html.enabled = false
    testLogging {
      events 'skipped', 'failed' // verbose log for failed and skipped tests (by default the name of the tests are not logged)
      exceptionFormat 'full' // log the full stack trace (default is the 1st line of the stack trace)
    }
    jacoco {
      enabled = true // do not disable recording of code coverage, so that remote Gradle cache entry can be used locally
      includes = ['com.sonar.*', 'com.sonarsource.*', 'org.sonar.*', 'org.sonarqube.*', 'org.sonarsource.*', 'io.sonarcloud.*']
    }
    if (project.hasProperty('maxParallelTests')) {
      maxParallelForks = project.maxParallelTests as int
    }
    if (project.hasProperty('parallelTests')) {
      // See https://guides.gradle.org/performance/#parallel_test_execution
      maxParallelForks = Runtime.runtime.availableProcessors().intdiv(2) ?: 1
    }
  }

  def protoMainSrc = 'src/main/protobuf'
  def protoTestSrc = 'src/test/protobuf'
  if (file(protoMainSrc).exists() || file(protoTestSrc).exists()) {
    // protobuf must be applied after java
    apply plugin: 'com.google.protobuf'

    sourceSets.main.proto.srcDir protoMainSrc  // in addition to the default 'src/main/proto'
    sourceSets.test.proto.srcDir protoTestSrc  // in addition to the default 'src/test/proto'
    protobuf {
      protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
      }
    }
    jar {
      exclude('**/*.proto')
    }
    idea {
      module {
        sourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        testSourceDirs += file("${protobuf.generatedFilesBaseDir}/test/java")
        generatedSourceDirs += file("${protobuf.generatedFilesBaseDir}/main/java")
        generatedSourceDirs += file("${protobuf.generatedFilesBaseDir}/test/java")
      }
    }
    ide.dependsOn(['generateProto', 'generateTestProto'])
  }

  if (official) {
    jar {
      // do not break incremental build on non official versions
      manifest {
        attributes(
          'Version': "${version}",
          'Implementation-Build': System.getenv('GIT_SHA1'),
          'Build-Time': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        )
      }
    }
  }

  license {
    ext.inceptionYear = '2009'
    header = rootProject.file('HEADER')
    strictCheck true
    mapping {
      java = 'SLASHSTAR_STYLE'
      js = 'SLASHSTAR_STYLE'
      ts = 'SLASHSTAR_STYLE'
      tsx = 'SLASHSTAR_STYLE'
      css = 'SLASHSTAR_STYLE'
      scss = 'SLASHSTAR_STYLE'
    }
    includes(['**/*.java', '**/*.js', '**/*.ts', '**/*.tsx', '**/*.css', '**/*.scss', '**/*.properties'])
  }

  tasks.withType(GenerateModuleMetadata) {
    enabled = false
  }

  publishing {
    publications {
      mavenJava(MavenPublication)
    }
  }
}

artifactory {
  clientConfig.setIncludeEnvVars(true)
  clientConfig.setEnvVarsExcludePatterns('*password*,*PASSWORD*,*secret*,*MAVEN_CMD_LINE_ARGS*,sun.java.command,*token*,*TOKEN*,*LOGIN*,*login*,*key*,*KEY*')
  contextUrl = System.getenv('ARTIFACTORY_URL')
  publish {
    repository {
      repoKey = System.getenv('ARTIFACTORY_DEPLOY_REPO')
      username = System.getenv('ARTIFACTORY_DEPLOY_USERNAME') ?: project.properties.artifactoryUsername
      password = System.getenv('ARTIFACTORY_DEPLOY_PASSWORD') ?: project.properties.artifactoryPaswword
    }
    defaults {
      properties = [
        'build.name': 'sonarcloud-core',
        'build.number': System.getenv('BUILD_NUMBER'),
        'pr.branch.target': System.getenv('GITHUB_BASE_BRANCH'),
        'pr.number': System.getenv('PULL_REQUEST'),
        'vcs.branch': System.getenv('GITHUB_BRANCH'),
        'vcs.revision': System.getenv('GIT_SHA1'),
        'version': version
      ]
      publications('mavenJava')
      publishPom = true
      publishIvy = false
    }
  }
  clientConfig.info.setBuildName('sonarcloud-core')
  clientConfig.info.setBuildNumber(System.getenv('BUILD_NUMBER'))
  // Define the artifacts to be deployed to https://binaries.sonarsource.com on releases
  clientConfig.info.addEnvironmentProperty('ARTIFACTS_TO_PUBLISH',
      "${project.group}:sonar-application:zip")
  // The name of this variable is important because it's used by the delivery process when extracting version from Artifactory build info.
  clientConfig.info.addEnvironmentProperty('PROJECT_VERSION', "${version}")
}

// https://github.com/ben-manes/gradle-versions-plugin
apply plugin: 'com.github.ben-manes.versions'
dependencyUpdates {
  rejectVersionIf {
    // Exclude dev versions from the list of dependency upgrades, for
    // example to replace:
    //   org.slf4j:log4j-over-slf4j [1.7.25 -> 1.8.0-beta4]
    // by
    //   org.slf4j:log4j-over-slf4j [1.7.25 -> 1.7.26]
    boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'jre12'].any { qualifier ->
      it.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
    }

    // Exclude upgrades on new major versions :
    //   com.hazelcast:hazelcast [3.12.3 -> 4.0.0]
    rejected |= !it.candidate.version.substring(0, 2).equals(it.currentVersion.substring(0, 2))

    rejected
  }
}

gradle.sharedServices.registerIfAbsent("no-parallel-db-lock", BuildService) {
  maxParallelUsages = 1
}
